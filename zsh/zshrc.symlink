export ZSH=$DOTFILES/zsh

if [[ -d $DOTFILES/zsh/functions ]]; then
    for func in $DOTFILES/zsh/functions/*(:t); autoload -U $func
fi

########################################################
# Configuration
########################################################

COLOR_BLACK="\e[0;30m"
COLOR_BLUE="\e[0;34m"
COLOR_GREEN="\e[0;32m"
COLOR_CYAN="\e[0;36m"
COLOR_PINK="\e[0;35m"
COLOR_RED="\e[0;31m"
COLOR_PURPLE="\e[0;35m"
COLOR_BROWN="\e[0;33m"
COLOR_LIGHTGRAY="\e[0;37m"
COLOR_DARKGRAY="\e[1;30m"
COLOR_LIGHTBLUE="\e[1;34m"
COLOR_LIGHTGREEN="\e[1;32m"
COLOR_LIGHTCYAN="\e[1;36m"
COLOR_LIGHTRED="\e[1;31m"
COLOR_LIGHTPURPLE="\e[1;35m"
COLOR_YELLOW="\e[1;33m"
COLOR_WHITE="\e[1;37m"
COLOR_NONE="\e[0m"

if [ -z "$TMUX" ]; then
    # -z string stringの長さがゼロなら真
    export TERM=xterm-256color-italic
else
    export TERM=tmux-256color
fi


# initialize autocomplete
autoload -U compinit add-zsh-hook
# 補完機能を有効にする
# -Uを付けるとユーザ側で定義したaliasに上書きされるのを防ぐ
# add-zsh-hook: hook関数を登録する。add-zsh-hook <hook名><関数名>
# hook名とはどういう時に関数が呼び出されるかというイベント種別を表す文字列
# https://qiita.com/mollifier/items/558712f1a93ee07e22e2
# hook名とはどういう時に関数が呼び出されるかというイベント種別を表す文字列
# hook名　  呼び出される条件
# chpwd     カレンとディレクトリが変更した時
# precmd    プロンプトを表示する直前
# preexec   Enterを推してコマンドを実行する直前
compinit

# prepend_path $HOME/npmbin/node_modules/.bin
# prepend_path関数を使ってパスに追加する
prepend_path /usr/local/opt/grep/libexec/gnubin
prepend_path /usr/local/sbin
prepend_path $DOTFILES/bin
prepend_path $HOME/bin

# define the code directory
# This is where my code exists and where I want the `c` autocomplete to work from exclusively
if [[ -d ~/code ]]; then
    export CODE_DIR=~/code
fi

# display how long all tasks over 10 seconds take
# 実行したプロセスの消費時間がREPORTTIME以上なら、自動的に統計情報を表示する
export REPORTTIME=10
# viのインサートモードからノーマルモードへ戻るまでのタイムラグを設定する
export KEYTIMEOUT=1              # 10ms delay for key sequences

setopt NO_BG_NICE    # Background処理があるが、niceが使えないため、BG_NICEオプションを無効化する
setopt NO_HUP        # don't kill background jobs when the shell exits
setopt NO_LIST_BEEP  # 補完の時にbeep音を鳴らさない
setopt LOCAL_OPTIONS # 関数の中で設定したオプションをその関数内だけで有効化する
                     #（https://qiita.com/mollifier/items/346b1ed7e86f9bf4a9cc）
setopt LOCAL_TRAPS   # 関数が関数内でシグナルのトラップを設定できる
setopt PROMPT_SUBST  # 後でセットするPROMPT変数内で変数展開するようになる

# history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt EXTENDED_HISTORY          # write the history file in the ":start:elapsed;command" format.
setopt HIST_REDUCE_BLANKS        # remove superfluous blanks before recording entry.
setopt SHARE_HISTORY             # share history between all sessions.
setopt HIST_IGNORE_ALL_DUPS      # delete old recorded entry if new entry is a duplicate.
#setopt noautomenu               # zshのtabの挙動をbashライクに戻す
setopt COMPLETE_ALIASES          # エイリアスを展開して、元のコマンドの補完が使えるようにする

# make terminal command navigation sane again
bindkey "^[[1;5C" forward-word                      # [Ctrl-right] - forward one word
bindkey "^[[1;5D" backward-word                     # [Ctrl-left] - backward one word
bindkey '^[^[[C' forward-word                       # [Ctrl-right] - forward one word
bindkey '^[^[[D' backward-word                      # [Ctrl-left] - backward one word
bindkey '^[[1;3D' beginning-of-line                 # [Alt-left] - beginning of line
bindkey '^[[1;3C' end-of-line                       # [Alt-right] - end of line
bindkey '^[[5D' beginning-of-line                   # [Alt-left] - beginning of line
bindkey '^[[5C' end-of-line                         # [Alt-right] - end of line
bindkey '^?' backward-delete-char                   # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
    bindkey "${terminfo[kdch1]}" delete-char        # [Delete] - delete forward
else
    bindkey "^[[3~" delete-char                     # [Delete] - delete forward
    bindkey "^[3;5~" delete-char
    bindkey "\e[3~" delete-char
fi
bindkey "^A" vi-beginning-of-line
bindkey -M viins "^F" vi-forward-word               # [Ctrl-f] - move to next word
bindkey -M viins "^E" vi-add-eol                    # [Ctrl-e] - move to end of line
# -M keymap: viins(viのインサートモード)のキーマップを修正
bindkey "^J" history-beginning-search-forward
bindkey "^K" history-beginning-search-backward

# matches case insensitive for lowercase
# マッチ仕様の変更はmatcher-listでできる。matcher-listで全域的な設定。matcherで特定のタグだけ適用
# 入力した単語の全ての文字を別のものに変えてマッチ試行させるには
# m:Lpattern=Tpattern
# M:Lpattern=Tpattern
# とする。mでは補完した時に置き換え後の文字列を、Mでは置き換え前の文字列を挿入する。
# m:{a-z}={A-Z}では、「aはA、bはB、cはC、...zはZに置き換え」た物でもマッチングを試すことを指示している。
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# pasting with tabs doesn't perform completion
# 空行に何も入れずにtabを押した時の動作を指定。（よくわからない）
zstyle ':completion:*' insert-tab pending

# default to file completion
# https://voidy21.hatenablog.jp/entry/20090902/1251918174
# completer = 補完システム
# _complete: 普通の補完関数
# _expand: グロブや変数の展開を行う。元々あった展開と比べて、細かい制御が可能
# _approximate: ミススペルを訂正した上で補完を行う
zstyle ':completion:*' completer _expand _complete _files _correct _approximate

# zstyle from fzf-tab
# https://github.com/Aloxaf/fzf-tab#usage
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# preview directory's content with exa when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'exa -1 --color=always $realpath'
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group ',' '.'

########################################################
# Plugin setup
########################################################

export ZPLUGDIR="$CACHEDIR/zsh/plugins"
[[ -d "$ZPLUGDIR" ]] || mkdir -p "$ZPLUGDIR"
# array containing plugin information (managed by zfetch)
typeset -A plugins
# -A 変数を連想配列にする。→つまり、pluginsは連想配列

zfetch mafredri/zsh-async async.plugin.zsh
zfetch zsh-users/zsh-syntax-highlighting
zfetch zsh-users/zsh-autosuggestions
zfetch chriskempson/base16-shell
# tab補完にfzfを導入して使いやすくする
zfetch Aloxaf/fzf-tab

# fnmはnode.jsのバージョンを管理するコマンド
if [[ -x "$(command -v fnm)" ]]; then
    eval "$(fnm env --use-on-cd)"
fi

[[ -e ~/.terminfo ]] && export TERMINFO_DIRS=~/.terminfo:/usr/share/terminfo

########################################################
# Setup
########################################################
#
# XDG base directory specification
export XDG_CONFIG_HOME="$HOME/.config"

# add a config file for ripgrep
export RIPGREP_CONFIG_PATH="$HOME/.rgrc"
# How to use ripgrep
# > rg [PATTERN]
# > rg [PATTERN] [FILE]
# > rg [PATTERN] [DIRECTORY]
# > rg -A/B/C NUM [PATTERN] パターンのA(fter)/B(efore)/C(ontext) NUM行を表示
# > rg -l [PATTERN] マッチしたファイルリストを表示
# > rg -t TYPE [PATTERN] TYPEに関連するファイルから検索する
# add a config file for ripgrep

[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow -g "!{.git,node_modules}/*" 2> /dev/null'
# --files print each files
# --no-ignore Don't respect ignore files
# --hidden Search hidden files and directories
# --follow Will follow symbolic links while travesing directories
# -g Include or exclude files and directories for searching that match the given glob. Procede a glob with a ! to exclude it.
#export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_COMMAND='fd --type f --color=never --hidden'
export FZF_CTRL_T_OPTS='--preview "bat  --color=always --style=header,numbers,grid --line-range :100 {}"'
# --color=<when> Specify when to colored output
# --style <style-components> Configure wihich elements (line numbers, file headers, grid borders, Git modifications, ...) to display in addition to the file contents
# --line-range <N:M> 30:40 prints lines 30 to 40
#                      :40 prints lines  1 to 40
#                    40:   prints lines 4o to end of the file
#                    30:+10 prints lines 30 to 40(=30+10)
#export FZF_ALT_C_COMMAND='fd --type d . --color=never --hidden'
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -50'"
# fzfのプレビューウィンドウをペイン内ではなく、ウィンドウ内の全体の80%の大きさで開く
# https://zenn.dev/eetann/articles/2022-03-19-fzf-tmux-popup
export FZF_TMUX_OPTS="-p 80%"

# add color to man pages
export MANROFFOPT='-c'
export LESS_TERMCAP_mb=$(tput bold; tput setaf 2)
export LESS_TERMCAP_md=$(tput bold; tput setaf 6)
export LESS_TERMCAP_me=$(tput sgr0)
export LESS_TERMCAP_so=$(tput bold; tput setaf 3; tput setab 4)
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 7)
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)

# source z.sh if it exists
zpath="$(brew --prefix)/etc/profile.d/z.sh"
if [ -f "$zpath" ]; then
    source "$zpath"
fi

########################################################
# Aliases
########################################################

# reload zsh config
alias reload!='RELOAD=1 source ~/.zshrc'

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # macOS `ls`
    colorflag="-G"
fi

# use nvim, but don't make me think about it
if [[ -n "$(command -v nvim)" ]]; then
  # -n string stringの長さがノンゼロなら真
    alias vi="nvim"
    alias vimu="nvim +PlugUpdate +PlugUpgrade"
    alias vimg="nvim +Ge:"
fi

# Filesystem aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....="cd ../../.."
alias .....="cd ../../../.."

alias l="ls -lah ${colorflag}"
alias la="ls -AF ${colorflag}"
alias ll="ls -lFh ${colorflag}"
alias lld="ls -l | grep ^d"
alias rmf="rm -rf"

# Helpers
alias grep='grep --color=auto'
alias df='df -h' # disk free, in Gigabytes, not bytes
alias du='du -h -c' # calculate disk usage for a folder

# Applications
alias ios='open -a /Applications/Xcode.app/Contents/Developer/Applications/Simulator.app'

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# Recursively delete `.DS_Store` files
alias cleanup="find . -name '*.DS_Store' -type f -ls -delete"
# remove broken symlinks
alias clsym="find -L . -name . -o -type d -prune -o -type l -exec rm {} +"

# git aliases
alias gs='git s'
alias glog="git l"

# tmux aliases
alias ta='tmux attach'
alias tls='tmux ls'
alias tat='tmux attach -t'
alias tns='tmux new-session -s'

alias lpath='echo $PATH | tr ":" "\n"' # list the PATH separated by new lines

alias nr="npm run"

source "$DOTFILES/zsh/utils.zsh"
source "$DOTFILES/zsh/prompt.zsh"

# If a local zshrc exists, source it
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

if [[ -a ~/.localrc ]]; then
    source ~/.localrc
fi
