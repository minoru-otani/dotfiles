#!/usr/bin/env bash
usage(){
  # basename 最後のスラッシュまで削ってファイル名のみを出力
  cat<<EOUSAGE
  Usage: $(basename $0) [OPTIONS]
  -s,--super-computer
              Specify computer site. Currently available sites: ohtaka, cynus, fugaku
  -b,--batch-file
              File name of a batch script
  -p,--project-name
              Name of the project (budget)
  -h,--help   Display help message
  -e,--elaps  Elaps time
  -q,--queue  Queue name
  -n,--node   Number of nodes
  -o,--omp    Number of omp threads
  -b,--bindir Plade of binary file
  --inp-file  Input file for calculation
  --out-file  Output file for calculation
EOUSAGE
}

fugaku(){
  if [ "$INFO" = "YES" ]; then
    cat<<_EOT_
_EOT_
  fi
}

ohtaka(){
  if [ "$INFO" = "YES" ]; then
    cat<<_EOT_
    1680 nodes * 2 CPUS * 64 cores
    1) Debug queue
      i8cpu   --  30 mins  |     8 nodes
    2) Batch queue
      F1cpu   --  24 hours |     1 nodes
      L1cpu   -- 120 hours |     1 nodes
      F4cpu   --  24 hours |     4 nodes
      L4cpu   -- 120 hours |     4 nodes
      F16cpu  --  24 hours |    16 nodes
      L16cpu  -- 120 hours |    16 nodes
      F36cpu  --  24 hours |    36 nodes
      L36cpu  -- 120 hours |    36 nodes
      F72cpu  --  24 hours |    72 nodes
      L72cpu  -- 120 hours |    72 nodes
      F144cpu --  24 hours |   144 nodes
      L144cpu -- 120 hours |   144 nodes
    Commands:
      ulimit -a, chquota, point,
      sbatch, squeue, scancel, pstat, sacct
_EOT_
    exit
  fi
  QUEUE=${_QUEUE:?" undefined"}
  NODE=${_NODE:?" undefined"}
  MPIRANK=${_MPIRANK:-128}
  OMP=${_OMP:-1}
  ELAPS=${_ELAPS:?" undefined"}
  BINDIR=${_BINDIR:?" undefined"}
  INPFILE=${_INPFILE:?" undefined"}
  OUTFILE=${_OUTFILE:?" undefined"}
  IMAGES=${_IMAGES:-1}
  POOLS=${_POOLS:-1}
  BANDS=${_BANDS:-1}
  TASKS=${_TASKS:-1}
  DIAG=${_DIAG:-1}
  if [ -z $FILE_BATCH ]; then
    cat<<_EOT_ | sbatch > ./stdout
#!/bin/sh
#SBATCH -p $QUEUE
#SBATCH -N $NODE
#SBATCH -n $MPIRANK
#SBATCH -c $OMP
#SBATCH -t $ELAPS

srun ${BINDIR}/pw.x -ni $IMAGES -nk $POOLS -nb $BANDS -nt $TASKS -nd $DIAG < $INPFILE > $OUTFILE
_EOT_
    JOBID=`cat ./stdout | awk '{print $4}'`
    rm -f ./stdout
    echo $JOBID, `date "+%Y%m%d_%H%M%S"`, $QUEUE, $INPFILE, $OUTFILE, $NODE, $OMP >> $HOME/.JOBLIST
    echo "a job is submit to $QUEUE. JobID: $JOBID"
  else
    cat<<_EOT_> $FILE_BATCH
#!/bin/sh
#SBATCH -p $QUEUE
#SBATCH -N $NODE
#SBATCH -n $MPIRANK
#SBATCH -c $OMP
#SBATCH -t $ELAPS

srun ${BINDIR}/pw.x -ni $IMAGES -nk $POOLS -nb $BANDS -nt $TASKS -nd $DIAG < $INPFILE > $OUTFILE
_EOT_
  fi
}

cygnus(){
  if [ "$INFO" = "YES" ]; then
    cat<<_EOT_
    46 nodes * 2 CPUs * 12 cores
    1) Interactive queue
      debug   --  1 hours |      2 nodes
    2) Batch queue
      gpu     -- 24 hours |     78 nodes
      gen_S   -- 24 hours |   1~16 nodes
      gen_M   -- 24 hours |  17~32 nodes
      gen_L   -- 24 hours |  33~78 nodes
    Commands:
      qsub, qstat, qdel, sstat
_EOT_
    exit
  fi
  # ${変数:-デフォルト値}
  # ${変数:?"メッセージ"} ← メッセージを出力して終了
  PRJNAME=${_PRJNAME:-"EIS00001"}
  QUEUE=${_QUEUE:?" undefined"}
  NODE=${_NODE:?" undefined"}
  MPIRANK=${_MPIRANK:-24}
  OMP=${_OMP:-1}
  ELAPS=${_ELAPS:?" undefined"} # format hh:mm:ss
  BINDIR=${_BINDIR:?" undefined"}
  INPFILE=${_INPFILE:?" undefined"}
  OUTFILE=${_OUTFILE:?" undefined"}
  if [ $(($OMP*$MPIRANK)) -gt 24 ]; then
    echo "Error: OMP_NUM_THREADS * MPI Rank exceeds 24"
    exit
  fi
  IMAGES=${_IMAGES:-1}
  POOLS=${_POOLS:-1}
  BANDS=${_BANDS:-1}
  TASKS=${_TASKS:-1}
  DIAG=${_DIAG:-1}
  if [ -z $FILE_BATCH ]; then
    cat<<_EOT_ > ./run.sh
#!/bin/bash
#PBS -A $PRJNAME
#PBS -q $QUEUE
#PBS -b $NODE
#PBS -l elapstim_req=$ELAPS
#PBS -T intmpi
#PBS -v NQSV_MPI_VER=19.0.5
#PBS -v OMP_NUM_THREADS=$OMP
#PBS -v BINDIR=$BINDIR
module load intmpi/\${NQSV_MPI_VER}
mpirun -hostfile \${PBS_NODEFILE} -np $(($NODE*$MPIRANK)) --perhost $(($NODE*$MPIRANK)) \${BINDIR}/pw.x -ni $IMAGES -nk $POOLS -nb $BANDS -nt $TASKS -nd $DIAG < \${PBS_O_WORKDIR}/$INPFILE > \${PBS_O_WORKDIR}/$OUTFILE
_EOT_
    qsub ./run.sh > ./stdout
    rm -f ./run.sh
    JOBID=`cat ./stdout | awk -F'[. ]' '{print $2}'`
    rm -f ./stdout
    echo $JOBID, `date "+%Y%m%d_%H%M%S"`, $QUEUE, $INPFILE, $OUTFILE, $NODE, $OMP >> $HOME/.JOBLIST
    echo "a job is submit to $QUEUE. JobID: $JOBID"
  else
    cat<<_EOT_> $FILE_BATCH
#!/bin/bash
#PBS -A $PRJNAME
#PBS -q $QUEUE
#PBS -b $NODE
#PBS -l elapstim_req=$ELAPS
#PBS -T intmpi
#PBS -v NQSV_MPI_VER=19.0.5
#PBS -v OMP_NUM_THREADS=$OMP
#PBS -v BINDIR=$BINDIR
module load intmpi/\${NQSV_MPI_VER}
mpirun -hostfile \${PBS_NODEFILE} -np $(($NODE*$MPIRANK)) --perhost $(($NODE*$MPIRANK)) \${BINDIR}/pw.x -ni $IMAGES -nk $POOLS -nb $BANDS -nt $TASKS -nd $DIAG < \${PBS_O_WORKDIR}/$INPFILE > \${PBS_O_WORKDIR}/$OUTFILE
_EOT_
  fi
}

# 配列の宣言
POSITIONAL_ARGS=()
# $0 スクリプト名
# $! 引数の数
# $@ 全ての引数（forループで分割処理される）
# $* 全ての引数（一つの文字列として）
# ${パラメータ:オフセット:長さ} 文字列から一部を切り出す。長さがマイナスだと
# 最後からその長さ分戻った所までを切り出す。
while [[ $# -gt 0 ]]; do
    case $1 in
        #//// ここにオプションを追加していきます ////
        -s|--super-computer) _SUPER_COMP="$2"; shift; shift;;
        -s=*|--super-computer=*) ARG="$1"; _SUPER_COMP="${ARG#*=}"; unset ARG; shift;;
        -f|--file-batch) FILE_BATCH="$2"; shift; shift;;
        -f=*|--file-batch=*) ARG="$1"; FILE_BATCH="${ARG#*=}"; unset ARG; shift;;
        -p|--project-name) _PRJNAME="$2"; shift; shift;;
        -p=*|--project-name=*) ARG="$1"; PRJNAME="${ARG#*=}"; unset ARG; shift;;
        -q|--queue) _QUEUE="$2"; shift; shift;;
        -q=*|--queue=*) ARG="$1"; _QUEUE="${ARG#*=}"; unset ARG; shift;;
        -n|--node) _NODE="$2"; shift; shift;;
        -n=*|--node=*) ARG="$1"; _NODE="${ARG#*=}"; unset ARG; shift;;
        -m|--mpi-rank) _MPIRANK="$2"; shift; shift;;
        -m=*|--mpi-rank=*) ARG="$1"; _MPIRANK="${ARG#*=}"; unset ARG; shift;;
        -o|--openmp) _OMP="$2"; shift; shift;;
        -o=*|--openmp=*) ARG="$1"; _OMP="${ARG#*=}"; unset ARG; shift;;
        -e|--elaps) _ELAPS="$2"; shift; shift;;
        -e=*|--elaps=*) ARG="$1"; _ELAPS="${ARG#*=}"; unset ARG; shift;;
        -b|--bindir) _BINDIR="$2"; shift; shift;;
        -b=*|--bindir=*) ARG="$1"; BINDIR="${ARG#*=}"; unset ARG; shift;;
        --inp-file) _INPFILE="$2"; shift; shift;;
        --inp-file=*) ARG="$1"; _INPFILE="${ARG#*=}"; unset ARG; shift;;
        --out-file) _OUTFILE="$2"; shift; shift;;
        --out-file=*) ARG="$1"; _OUTFILE="${ARG#*=}"; unset ARG; shift;;
        --images) _IMAGES="$2"; shift; shift;;
        --images=*) ARG="$1"; _IMAGES="${ARG#*=}"; unset ARG; shift;;
        --pools) _POOLS="$2"; shift; shift;;
        --pools=*) ARG="$1"; _POOLS="${ARG#*=}"; unset ARG; shift;;
        --bands) _BANDS="$2"; shift; shift;;
        --bands=*) ARG="$1"; _BANDS="${ARG#*=}"; unset ARG; shift;;
        --tasks) _TASKS="$2"; shift; shift;;
        --tasks=*) ARG="$1"; _TASKS="${ARG#*=}"; unset ARG; shift;;
        --diag) _DIAG="$2"; shift; shift;;
        --diag=*) ARG="$1"; _DIAG="${ARG#*=}"; unset ARG; shift;;
        --info) INFO="YES"; shift;;  #// Without value
        --help) usage; exit;;  #// Without value
        # += 配列、変数に値を追加する
        --) shift; POSITIONAL_ARGS+=("$@"); set --;;
        --*) echo "[ERROR] Unknown option $1"; exit 1;;
        -*) #// Multiple short name options. e.g.-fh
            OPTIONS=$1
            for (( i=1; i<${#OPTIONS}; i++ )); do
                case "-${OPTIONS:$i:1}" in
                    #//// ここにフラグの ショート オプション を追加していきます ////
                    -f)  FLAG="YES";;
                    -h)  HELP="YES";;
                    *) echo "[ERROR] Unknown option -${OPTIONS:$i:1}"; exit 1;;
                esac
            done
            unset OPTIONS; shift;;
        *) POSITIONAL_ARGS+=("$1"); shift;;
    esac
done

# set -- aaa bbb ccc, 位置引数を上書きする。
# [@]配列の全ての値を参照
set -- "${POSITIONAL_ARGS[@]}"  #// set $1, $2, ...
unset POSITIONAL_ARGS

SUPER_COMP=${_SUPER_COMP:-$(hostname -s)}
case "${SUPER_COMP:0:6}" in
  ohtaka) ohtaka;;
  cygnus) cygnus;;
  fn01sv) fugaku;; # hostname of Fugaku
#  *) echo "Computer site must be defined"
  *) echo "Test environemtn on Mac"
    usage;;
esac

#echo "\$COMP_SITE = \"${SUPER_COMP}\""
#echo "\$BATCH_FILE = \"${BATCH_FILE}\""
#echo "\$INFO        = \"${INFO}\""
#echo "\$FLAG        = \"${FLAG}\""
#echo "\$HELP        = \"${HELP}\""
#echo "\$1           = \"$1\""
#echo "\$2           = \"$2\""
